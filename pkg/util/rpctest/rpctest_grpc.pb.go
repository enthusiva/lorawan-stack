// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpctest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FooBarClient is the client API for FooBar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooBarClient interface {
	Unary(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Foo, opts ...grpc.CallOption) (FooBar_ServerStreamClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_BidiStreamClient, error)
}

type fooBarClient struct {
	cc grpc.ClientConnInterface
}

func NewFooBarClient(cc grpc.ClientConnInterface) FooBarClient {
	return &fooBarClient{cc}
}

func (c *fooBarClient) Unary(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/rpctest.FooBar/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooBarClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FooBar_ServiceDesc.Streams[0], "/rpctest.FooBar/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarClientStreamClient{stream}
	return x, nil
}

type FooBar_ClientStreamClient interface {
	Send(*Foo) error
	CloseAndRecv() (*Bar, error)
	grpc.ClientStream
}

type fooBarClientStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarClientStreamClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooBarClientStreamClient) CloseAndRecv() (*Bar, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooBarClient) ServerStream(ctx context.Context, in *Foo, opts ...grpc.CallOption) (FooBar_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FooBar_ServiceDesc.Streams[1], "/rpctest.FooBar/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FooBar_ServerStreamClient interface {
	Recv() (*Bar, error)
	grpc.ClientStream
}

type fooBarServerStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarServerStreamClient) Recv() (*Bar, error) {
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooBarClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (FooBar_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FooBar_ServiceDesc.Streams[2], "/rpctest.FooBar/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooBarBidiStreamClient{stream}
	return x, nil
}

type FooBar_BidiStreamClient interface {
	Send(*Foo) error
	Recv() (*Bar, error)
	grpc.ClientStream
}

type fooBarBidiStreamClient struct {
	grpc.ClientStream
}

func (x *fooBarBidiStreamClient) Send(m *Foo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fooBarBidiStreamClient) Recv() (*Bar, error) {
	m := new(Bar)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FooBarServer is the server API for FooBar service.
// All implementations must embed UnimplementedFooBarServer
// for forward compatibility
type FooBarServer interface {
	Unary(context.Context, *Foo) (*Bar, error)
	ClientStream(FooBar_ClientStreamServer) error
	ServerStream(*Foo, FooBar_ServerStreamServer) error
	BidiStream(FooBar_BidiStreamServer) error
	mustEmbedUnimplementedFooBarServer()
}

// UnimplementedFooBarServer must be embedded to have forward compatible implementations.
type UnimplementedFooBarServer struct {
}

func (UnimplementedFooBarServer) Unary(context.Context, *Foo) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedFooBarServer) ClientStream(FooBar_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedFooBarServer) ServerStream(*Foo, FooBar_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedFooBarServer) BidiStream(FooBar_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedFooBarServer) mustEmbedUnimplementedFooBarServer() {}

// UnsafeFooBarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooBarServer will
// result in compilation errors.
type UnsafeFooBarServer interface {
	mustEmbedUnimplementedFooBarServer()
}

func RegisterFooBarServer(s grpc.ServiceRegistrar, srv FooBarServer) {
	s.RegisterService(&FooBar_ServiceDesc, srv)
}

func _FooBar_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooBarServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpctest.FooBar/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooBarServer).Unary(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooBar_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooBarServer).ClientStream(&fooBarClientStreamServer{stream})
}

type FooBar_ClientStreamServer interface {
	SendAndClose(*Bar) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type fooBarClientStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarClientStreamServer) SendAndClose(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooBarClientStreamServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FooBar_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Foo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FooBarServer).ServerStream(m, &fooBarServerStreamServer{stream})
}

type FooBar_ServerStreamServer interface {
	Send(*Bar) error
	grpc.ServerStream
}

type fooBarServerStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarServerStreamServer) Send(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func _FooBar_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FooBarServer).BidiStream(&fooBarBidiStreamServer{stream})
}

type FooBar_BidiStreamServer interface {
	Send(*Bar) error
	Recv() (*Foo, error)
	grpc.ServerStream
}

type fooBarBidiStreamServer struct {
	grpc.ServerStream
}

func (x *fooBarBidiStreamServer) Send(m *Bar) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fooBarBidiStreamServer) Recv() (*Foo, error) {
	m := new(Foo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FooBar_ServiceDesc is the grpc.ServiceDesc for FooBar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooBar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpctest.FooBar",
	HandlerType: (*FooBarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _FooBar_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _FooBar_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _FooBar_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _FooBar_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpctest.proto",
}
